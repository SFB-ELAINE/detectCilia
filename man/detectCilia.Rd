% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detectCilia.R
\name{detectCilia}
\alias{detectCilia}
\title{Detect cilia in images}
\usage{
detectCilia(
  input_dir_tif = NULL,
  input_file_czi = NULL,
  output_dir = NULL,
  cilium_color = "red",
  nucleus_color = "blue",
  projection_method_for_threshold_calculation = "max",
  threshold_by_density_of_cilium_pixels = TRUE,
  use_histogram_equalization_for_threshold_calculation = FALSE,
  threshold_find = NULL,
  threshold_connect = NULL,
  vicinity_combine = NULL,
  vicinity_connect = NULL,
  min_cilium_area = NULL,
  max_cilium_area = NULL,
  number_size_factor = NULL,
  pixel_size = NULL,
  slice_distance = NULL,
  nuc_mask_width_height = NULL,
  export_normalized_images = FALSE,
  number_of_expected_nuclei = NULL
)
}
\arguments{
\item{input_dir_tif}{Path to a directory containing z-stack slices in TIF
format as a string.}

\item{input_file_czi}{Path to a CZI file with the z-stack image as a string.}

\item{output_dir}{Path to a directory where the results are to be saved
as a string.}

\item{cilium_color}{Color of the cilium staining as a string or single
character ("r", "red", "g", "green", "b", or "blue").}

\item{nucleus_color}{Color of the nuclei staining as a string or single
character ("r", "red", "g", "green", "b", or "blue").}

\item{projection_method_for_threshold_calculation}{Method as a string for
calculating the z-stack projection which is used for calculating
threshold to find cilia positions (either "mean" or "max").}

\item{threshold_by_density_of_cilium_pixels}{A Boolean.
* `TRUE` (the default): Disregard the custom threshold values (if given)
and, instead, use a function to calculate the binarization thresholds by
looking at the density of cilium color pixels found in the entire image.
* `FALSE`: Use custom threshold values.}

\item{use_histogram_equalization_for_threshold_calculation}{A Boolean
stating whether to use a histogram equalization algorithm for determining
threshold values and finding cilia in projection.}

\item{threshold_find}{A number between 0 and 1 as the minimum
intensity of possible cilia pixels in the z-stack projection.}

\item{threshold_connect}{A number between 0 and 1 (and usually
lower than `threshold_find`) as the minimum intensity to find possible
cilia pixels in every z-stack layer. Only those pixels are kept which
are close to already found ciliary structures.}

\item{vicinity_combine}{Number of pixels (integer) defining the
neighborhood for combining found ciliary pixels in the z-stack
projection to one cilium.}

\item{vicinity_connect}{Number of pixels (integer) defining the
neighborhood for combining found ciliary pixels in every z-stack layer
to one cilium.}

\item{min_cilium_area}{Minimum number of pixels (integer) a cilium should
consist of.}

\item{max_cilium_area}{Maximum number of pixels (integer) a cilium should
consist of.}

\item{number_size_factor}{A number for resizing the number image
to be added.}

\item{pixel_size}{A number indicating the size (length and height) of one
pixel in micrometers}

\item{slice_distance}{A number showing the distance of two consecutive
z-stack layers in micrometers.}

\item{nuc_mask_width_height}{Number of pixels (integer) for nuclei detection.}

\item{export_normalized_images}{A Boolean.
* `TRUE`: Also export the images with a normalized version of the original
z-stack projection/z-stack layer.
* `FALSE` (Default): Do not export normalized images.}

\item{number_of_expected_nuclei}{A number depicting the number of cells
(= max. number of cilia) to be found if no nuclei are present in image.}
}
\value{
A list with the following content: 
1) tibble `df_parameterlist` with information about used parameters,
2) tibble `df_cilium_information`with information about found cilia,
3) tibble `df_cilium_summary` with lengths of found cilia.
}
\description{
`detectCilia()` is the main function to detect cilia or similar small
labelled objects in a CZI (ideally) or TIFF image. At first, the cilia
will be located by using a projection method. Afterward, the length of
a cilium is determined in the horizontal plane. The height in the
vertical plane is being determined by the number of z-stack layers
where a cilium is found. The entire length of the cilium is being
calculated using Pythagoras' theorem (\code{c=sqrt(a^2+b^2)}).
The output will be written in the current directory.
Please be aware that that the coordinate system is turned by 90Â° to the
right. The origin of the x- and y-axes is in the upper-left corner of the
image. (The x-axis points downwards and the y-axis to the right.)
}
\examples{
# Detect all cilia (red structures) (and nuclei (blue structures)) in
# a CZI image
detectCilia::detectCilia(input_file_czi = system.file("extdata",
"testImageCzi", "CiliaImage.czi", package = "detectCilia",
mustWork = TRUE))
}
